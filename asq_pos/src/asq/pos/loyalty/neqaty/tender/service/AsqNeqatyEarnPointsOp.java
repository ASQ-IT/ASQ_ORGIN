package asq.pos.loyalty.neqaty.tender.service;

import java.math.BigDecimal;
import javax.inject.Inject;
import javax.inject.Provider;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import asq.pos.common.AsqConfigurationMgr;
import dtv.i18n.IFormattable;
import dtv.pos.common.TransactionType;
import dtv.pos.common.ValueKeys;
import dtv.pos.framework.op.Operation;
import dtv.pos.iframework.event.IXstEvent;
import dtv.pos.iframework.op.IOpResponse;
import dtv.xst.dao.trl.IRetailTransaction;
import dtv.xst.dao.ttr.ITenderLineItem;

public class AsqNeqatyEarnPointsOp extends Operation {

	private static final Logger LOG = LogManager.getLogger(AsqNeqatyEarnPointsOp.class);

	/**
	 * This class checks if customer is already attached to sale transaction. If
	 * Yes, and the trx total is greater than 100SAR, STC points added to the
	 * customer account. If customer not available, prompt cashier with an option to
	 * add customer or complete the trx without adding points.
	 */

	@Inject
	protected Provider<IAsqNeqatyService> asqNeqatyService;

	@Inject
	AsqNeqatyHelper asqNeqatyHelper;

	/**
	 * This method handles the customer availability parameter check and points
	 * calculation for Earn API
	 * 
	 * @param
	 * @return
	 */

	@SuppressWarnings("unused")
	@Override
	public IOpResponse handleOpExec(IXstEvent paramIXstEvent) {

		IRetailTransaction txn = this._transactionScope.getTransaction(TransactionType.RETAIL_SALE);
		boolean isCustomerPresent = false;
		String custMobileNmbr = "";
		int pointsForCalculation = AsqConfigurationMgr.getSTCPointsCalculation();
		LOG.info("STC Earn API Point calculation value parameter : " + pointsForCalculation);
		BigDecimal valueForCalculation = new BigDecimal(pointsForCalculation);
		ITenderLineItem tenderLine = getScopedValue(ValueKeys.CURRENT_TENDER_LINE);

		if (null != txn && (txn.getCustomerParty() != null)) {
			isCustomerPresent = true;
		}
		if (!isReturnTransaction(txn)) {
			if (getScopedValue(AsqValueKeys.ASQ_MOBILE_NUMBER) != null) {
				custMobileNmbr = getScopedValue(AsqValueKeys.ASQ_MOBILE_NUMBER);
			}
			AsqNeqatyServiceResponse response = earnPoints(custMobileNmbr);
			if (null != response && 0 != response.getResultCode()) {
				return handleServiceError(response);
			} else if (null == response) {
				return technicalErrorScreen("Service has null response");
			}
		}
		return this.HELPER.completeResponse();
	}

	public IOpResponse handleServiceError(AsqNeqatyServiceResponse asqServiceResponse) {
		IFormattable[] args = new IFormattable[2];
		args[0] = _formattables.getSimpleFormattable(String.valueOf(asqServiceResponse.getResultCode()));
		args[1] = _formattables.getSimpleFormattable(asqServiceResponse.getResultDescription());
		String errorConstant = asqNeqatyHelper.mapError(asqServiceResponse.getResultCode());
		LOG.info("Error From Neqaty Inquire OTP Operation : " + asqServiceResponse.getResultCode() + " - "
				+ asqServiceResponse.getResultDescription());
		LOG.info("Error Message Generated By Xstore based on Neqaty Inquire OTP Operation Response: " + errorConstant);
		return HELPER.getPromptResponse(errorConstant, args);
	}

	private IOpResponse technicalErrorScreen(String message) {
		IFormattable[] args = new IFormattable[2];
		args[1] = _formattables.getSimpleFormattable(message);
		LOG.info("Neqaty Inquire OTP Operation::::: " + message);
		return HELPER.getPromptResponse("ASQ_NEQATY_TECHNICAL_ERROR", args);
	}

	/**
	 * Check for return transaction Do not add points for customer for return or
	 * exchange transaction
	 * 
	 * @param trn
	 * @return boolean
	 */
	public boolean isReturnTransaction(IRetailTransaction trn) {

		return null != trn && BigDecimal.ZERO.compareTo(trn.getTotal()) > 0;
	}

	/**
	 * Method handles all service errors returned from Earn API
	 * 
	 * @param asqServiceResponse
	 * @return ErrorPrompt
	 */

	public IOpResponse handleServiceError(AsqNeqatyLoyaltyServiceResponse asqServiceResponse) {
		IFormattable[] args = new IFormattable[2];
		AsqNeqatyErrorDesc error = asqServiceResponse.getErrors()[0];
		args[0] = _formattables.getSimpleFormattable(Integer.toString(error.getCode()));
		args[1] = _formattables.getSimpleFormattable(error.getDescription());
		String errorConstant = asqNeqatyHelper.mapError(error.getCode());
		LOG.info("Error From STC Earn Reward API: " + error.getCode() + " - " + error.getDescription());
		LOG.info("Error Message Generated By Xstore based on STC Earn Reward Response: " + errorConstant);
		return HELPER.getPromptResponse(errorConstant, args);
	}

	private AsqNeqatyServiceResponse earnPoints(String custMobileNmbr) {
		LOG.debug("Neqaty Inquire OTP Operation service call starts here: ");
		IAsqNeqatyServiceRequest request = new AsqNeqatyServiceRequest();
		request.setAuthenticationKey(System.getProperty("asq.neqaty.auth.key"));
		request.setOperationType("Earn");
		request.setMsisdn(custMobileNmbr);
		request.setTid(0);
		request.setMethod(NeqatyMethod.AUTHORIZE);
		LOG.info("Sending request to Earn API: " + request.toString());
		return (AsqNeqatyServiceResponse) asqNeqatyService.get().earnNeqityPoint(request);
	}
}
