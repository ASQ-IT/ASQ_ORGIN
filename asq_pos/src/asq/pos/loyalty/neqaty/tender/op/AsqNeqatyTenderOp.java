package asq.pos.loyalty.neqaty.tender.op;

import javax.inject.Inject;
import javax.inject.Provider;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import asq.pos.loyalty.neqaty.tender.AsqNeqatyServiceRequest;
import asq.pos.loyalty.neqaty.tender.AsqNeqatyServiceResponse;
import asq.pos.loyalty.neqaty.tender.IAsqNeqatyService;
import asq.pos.loyalty.neqaty.tender.IAsqNeqatyServiceRequest;
import asq.pos.loyalty.stc.tender.AsqStcHelper;
import asq.pos.loyalty.stc.tender.service.AsqSTCErrorDesc;
import asq.pos.loyalty.stc.tender.service.AsqSTCLoyaltyServiceResponse;
import dtv.i18n.IFormattable;
import dtv.pos.framework.action.type.XstDataActionKey;
import dtv.pos.framework.op.AbstractFormOp;
import dtv.pos.framework.validation.ValidationResultList;
import dtv.pos.iframework.action.IXstDataAction;
import dtv.pos.iframework.op.IOpResponse;
import dtv.pos.iframework.validation.IValidationResult;
import dtv.pos.iframework.validation.IValidationResultList;
import dtv.pos.iframework.validation.SimpleValidationResult;
import dtv.util.StringUtils;

public class AsqNeqatyTenderOp extends AbstractFormOp<AsqNeqatyMobileNumberEditModel> {

	private static final Logger LOG = LogManager.getLogger(AsqNeqatyTenderOp.class);

	/**
	 * This class extends the Xstore Standard form class to handle all actions
	 * related to OTP field
	 */

	@Inject
	protected Provider<IAsqNeqatyService> asqNeqatyService;

	@Inject
	AsqStcHelper asqStcHelper;

	@Override
	protected AsqNeqatyMobileNumberEditModel createModel() {
		return new AsqNeqatyMobileNumberEditModel();
	}

	@Override
	protected String getFormKey() {
		return "ASQ_STC_OTP";
	}

	/**
	 * This method handles the DataActions after submitting OTP request
	 * 
	 * @throws Database persistent Exception
	 * @param IRetailTransaction originalPosTrx, String globalID, Date requestDate
	 * @return generated globalID
	 */

	@Override
	protected IOpResponse handleDataAction(IXstDataAction argAction) {

		String custMobileNmbr = "";
		Integer amount = null;
		try {
			if (XstDataActionKey.ACCEPT.equals(argAction.getActionKey())) {
				AsqNeqatyMobileNumberEditModel model = getModel();
				IAsqNeqatyServiceRequest request = new AsqNeqatyServiceRequest();

				AsqNeqatyServiceResponse response = (AsqNeqatyServiceResponse) asqNeqatyService.get().inqueryWithOTP(request);
			}

		} catch (Exception exception) {
			LOG.error("Exception from Neqaty form in Handling Data Action :" + exception);
		}
		return this.HELPER.completeResponse();
	}

	/**
	 * This method handles form validation of mobile number field
	 * 
	 * @param argModel
	 * @return validationResultList
	 */

	@Override
	protected IValidationResultList validateForm(AsqNeqatyMobileNumberEditModel argModel) {
		ValidationResultList validationResultList = new ValidationResultList();
		if (StringUtils.isEmpty(argModel.getCustMobileNumber())) {
			IValidationResult idResult = SimpleValidationResult.getFailed("_asqOTPFieldExceptionMessage");
			validationResultList.add(idResult);
		}
		return validationResultList;
	}

	/**
	 * This method handles the Trigger OTP API call service errors
	 * 
	 * @param asqServiceResponse
	 * @return Error Prompts
	 */

	public IOpResponse handleServiceError(AsqSTCLoyaltyServiceResponse asqServiceResponse) {
		IFormattable[] args = new IFormattable[2];
		AsqSTCErrorDesc error = asqServiceResponse.getErrors()[0];
		args[0] = _formattables.getSimpleFormattable(error.getCode());
		args[1] = _formattables.getSimpleFormattable(error.getDescription());
		String errorConstant = asqStcHelper.mapError(error.getCode());
		LOG.info("Error From STC REDEEM API::::: " + error.getCode() + " - " + error.getDescription());
		LOG.info("Error Message Generated By Xstore based on STC OTP API Response::::: " + errorConstant);
		return HELPER.getPromptResponse(errorConstant, args);
	}
}
